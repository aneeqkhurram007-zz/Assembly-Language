EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
decimalInput.exe_ -- emu8086 assembler version: 4.08  
 
[ 5/9/2021  --  9:27:10 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       .data
[   4]    0100: 45 6E 74 65 72 20 64 65 63 69 6D 61   str1 db "Enter decimal number: $"
                6C 20 6E 75 6D 62 65 72 3A 20 24    
[   5]    0117: 0A 0D 4F 75 74 70 75 74 3A 20 32 34   str2 db 10,13,"Output: 240 $"
                30 20 24                            
[   6]    0126: 00 00                                 total dw 0
[   7]    0128: 0A                                    ten db 10
[   8]        :                                       .code
[   9]    0130:                                       main proc
[  10]    0130: B8 10 00                              mov ax, @data
[  11]    0133: 8E D8                                 mov ds, ax
[  12]        :                                       
[  13]    0135: B4 09                                 mov ah, 9
[  14]    0137: BA 00 00                              lea dx, str1
[  15]    013A: CD 21                                 int 21h
[  16]        :                                       
[  17]        :                                       ;input
[  18]        :                                       
[  19]    013C: B4 01                                 mov ah, 1
[  20]    013E: CD 21                                 int 21h
[  21]    0140:                                       while:
[  22]    0140: 3C 0D                                 cmp al, 13
[  23]    0142: 74 19                                 je endWhile
[  24]    0144: 2C 30                                 sub al, 48
[  25]    0146: 8A D8                                 mov bl, al
[  26]    0148: A1 26 00                              mov ax, total
[  27]    014B: F6 26 28 00                           mul ten
[  28]    014F: 02 C3                                 add al, bl
[  29]    0151: A3 26 00                              mov total, ax
[  30]    0154: B8 00 00                              mov ax, 0
[  31]    0157: B4 01                                 mov ah, 1
[  32]    0159: CD 21                                 int 21h
[  33]    015B: EB E3                                 jmp while
[  34]        :                                       
[  35]    015D:                                       endWhile:
[  36]        :                                       ;output
[  37]    015D: B4 09                                 mov ah, 9
[  38]    015F: BA 17 00                              lea dx, str2
[  39]    0162: CD 21                                 int 21h
[  40]        :                                       
[  41]    0164: A1 26 00                              mov ax, total
[  42]    0167: 3C 00                                 cmp al, 0
[  43]    0169: 7C 19                                 jl end
[  44]    016B: B9 00 00                              mov cx, 0
[  45]    016E:                                       outWhile:
[  46]    016E: 3C 00                                 cmp al, 0
[  47]    0170: 74 08                                 je next
[  48]    0172: F6 36 28 00                           div ten
[  49]    0176: 50                                    push ax
[  50]    0177: 41                                    inc cx
[  51]    0178: EB F4                                 jmp outWhile
[  52]    017A:                                       next:
[  53]    017A: B4 02                                 mov ah, 2
[  54]    017C:                                       for:
[  55]    017C: 5B                                    pop bx
[  56]    017D: 80 C7 30                              add bh, 48
[  57]    0180: CD 21                                 int 21h
[  58]    0182: E2 F8                                 loop for
[  59]        :                                       
[  60]    0184:                                       end:
[  61]    0184: B4 02                                 mov ah, 2
[  62]    0186: B2 2D                                 mov dl, '-'
[  63]    0188: CD 21                                 int 21h
[  64]    018A: 35 FF FF                              xor ax, 0ffffh
[  65]    018D: 05 01 00                              add ax, 1
[  66]    0190: B4 4C                                 mov ah, 4ch
[  67]    0192: CD 21                                 int 21h
[  68]        :                                       
[  69]        :                                       
[  70]        :                                       main endp
[  71]        :                                       end main
[  72]        :                                       
[  73]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 94      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 91      -   check sum (l.byte)
0013: B8      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 13      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 13      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
