EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
task1.exe_ -- emu8086 assembler version: 4.08  
 
[ 4/12/2021  --  10:01:52 AM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ;factorial of a number
[   2]        :                                       .model small
[   3]        :                                       .stack 100h
[   4]        :                                       .data
[   5]        :                                       
[   6]    0100: 45 6E 74 65 72 20 61 20 6E 75 6D 62   msg1 db "Enter a number to find factorial: $"
                65 72 20 74 6F 20 66 69 6E 64 20 66 
                61 63 74 6F 72 69 61 6C 3A 20 24    
[   7]    0123: 00                                    num  db ?
[   8]    0124: 00                                    sum  db 0
[   9]    0125: 00                                    subSum db 0
[  10]    0126: 00                                    i db 0
[  11]    0127: 00                                    j db 0
[  12]        :                                       .code
[  13]    0130:                                       main proc
[  14]        :                                       
[  15]    0130: B8 10 00                              mov ax, @data
[  16]    0133: 8E D8                                 mov ds, ax
[  17]        :                                       
[  18]    0135: B4 09                                 mov ah, 9
[  19]    0137: BA 00 00                              lea dx, msg1
[  20]    013A: CD 21                                 int 21h
[  21]        :                                       
[  22]    013C: B4 01                                 mov ah, 1
[  23]    013E: CD 21                                 int 21h
[  24]        :                                       
[  25]    0140: A2 23 00                              mov num, al
[  26]        :                                       
[  27]    0143: 80 2E 23 00 30                        sub num, 48
[  28]        :                                       
[  29]    0148: 80 3E 23 00 00                        cmp num, 0
[  30]    014D: 74 45                                 je if
[  31]        :                                       
[  32]    014F:                                       else:
[  33]    014F: 8A 0E 23 00                           mov cl, num
[  34]    0153: 88 0E 24 00                           mov sum, cl
[  35]    0157: FE C9                                 dec cl
[  36]    0159: 88 0E 26 00                           mov i, cl
[  37]    015D:                                       while:
[  38]    015D: 80 3E 26 00 01                        cmp i, 1
[  39]    0162: 7E 37                                 jle end
[  40]        :                                       
[  41]    0164: 8A 16 24 00                           mov dl, sum
[  42]    0168: 88 16 25 00                           mov subSum, dl
[  43]        :                                       
[  44]    016C: C6 06 24 00 00                        mov sum, 0
[  45]    0171: C6 06 27 00 00                        mov j, 0
[  46]        :                                       
[  47]        :                                       
[  48]        :                                       
[  49]    0176:                                       while1:
[  50]    0176: 8A 16 25 00                           mov dl, subSum
[  51]    017A: 8A 0E 26 00                           mov cl, i
[  52]    017E: 38 0E 27 00                           cmp j, cl
[  53]    0182: 7D 0A                                 jge exit
[  54]        :                                       
[  55]    0184: 00 16 24 00                           add sum, dl
[  56]    0188: FE 06 27 00                           inc j
[  57]    018C: EB E8                                 jmp while1
[  58]        :                                       
[  59]        :                                       
[  60]        :                                       
[  61]        :                                       
[  62]    018E:                                       exit:
[  63]    018E: FE 0E 26 00                           dec i
[  64]    0192: EB C9                                 jmp while
[  65]    0194:                                       if:
[  66]    0194: C6 06 24 00 01                        mov sum, 1
[  67]    0199: EB 00                                 jmp end
[  68]        :                                       
[  69]        :                                       
[  70]        :                                       main endp
[  71]    019B:                                       end:
[  72]    019B: 8A 16 24 00                           mov dl, sum
[  73]    019F: B4 4C                                 mov ah, 4ch
[  74]    01A1: CD 21                                 int 21h
[  75]        :                                       end main
[  76]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: A3      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: CD      -   check sum (l.byte)
0013: 46      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 13      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 13      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
