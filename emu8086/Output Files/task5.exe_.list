EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
task5.exe_ -- emu8086 assembler version: 4.08  
 
[ 3/21/2021  --  7:50:37 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; task 5
[   2]        :                                       .model small
[   3]        :                                       .stack 100h
[   4]        :                                       .data
[   5]    0100: 54 68 65 20 73 75 6D 20 69 73 20 31   msg1 db 'The sum is 1050.$'
                30 35 30 2E 24                      
[   6]        :                                       .code
[   7]    0120:                                       main proc
[   8]        :                                       
[   9]    0120: B8 10 00                              mov ax, @data
[  10]    0123: 8E D8                                 mov ds, ax
[  11]        :                                       
[  12]    0125: B4 09                                 mov ah, 9
[  13]    0127: BA 00 00                              lea dx, msg1
[  14]    012A: CD 21                                 int 21h
[  15]        :                                       
[  16]    012C: B9 64 00                              mov cx, 100
[  17]    012F: B8 00 00                              mov ax, 0
[  18]        :                                       
[  19]    0132:                                       for:
[  20]        :                                       
[  21]    0132: 03 C1                                 add ax, cx
[  22]    0134: 83 E9 04                              sub cx, 4
[  23]        :                                       
[  24]    0137: E2 F9                                 loop for
[  25]        :                                       
[  26]    0139: 8B D0                                 mov dx, ax
[  27]        :                                       
[  28]        :                                       main endp
[  29]        :                                       
[  30]    013B: B4 4C                                 mov ah, 4ch
[  31]    013D: CD 21                                 int 21h
[  32]        :                                       
[  33]        :                                       end main
[  34]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 3F      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 88      -   check sum (l.byte)
0013: 6B      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 12      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 12      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
