.model small
.stack 100h
.data

m0 dw 10,13,9,9,"Welcome To Comsats Restaurant$"
m1 dw 10,13,10,13,9,"Food Menu",10,13,"$"
v1 dw 10,13,10,13,9,"Appetizers$"
m2 dw 10,13,10,13, "1.LASAGNE 60/-",10,13,"2.MARGARITA 50/-",10,13,"3.SPAGHETTI 40/- $"

v2 dw 10,13,10,13,9,"Main Course$"
v3 dw 10,13,10,13, "4.SHAHI BIRYANI 100/-",10,13,"5.BEEF QOURMA 150/-",10,13,"6.CHICKEN TIKKA 120/- $"
v4 dw 10,13,10,13,9,"Fast Food$"
v5 dw 10,13,10,13, "7.PIZZA 200/-",10,13,"8.BURGER 150/-$"

m3 dw 10,13,10,13, "Select the menu number: $"

m4 dw 10,13,10,13, "To add press 1 or press 2 to get back menu: $"
m5 dw 10,13,10,13, "Enter quantity: $"
m6 dw 10,13,10,13, "Total price: $"
m7 dw 10,13,10,13, "      *****THANK YOU*****$"

m8 dw 10,13,10,13, "There is no more than 3 items, but you can add one.$"
m9 dw 10,13,10,13, "Enter Food name: $"
m10 dw 10,13,10,13,9,"Price: $"
m11 dw "9.$"

m12 dw "/-$"
m13 dw 10,13,10,13, "ReOrder : Press 1.$",
m14 dw 10,13,10,13, "Exit : Press Any key $"
m15 dw 10,13,"----------------------------","$"

m16 dw 10,13,10,13,"----------------------------","$"
m17 dw 10,13,"Press 1. Add Menu",10,13,"Press 2. Order",10,13,"Press 3. Exit $"
m18 dw 10,13,10,13,"Your Choice: $"
m19 dw 10,13,10,13,"Previous Total: $"

m20 dw 10,13,"Do you want to change your Order ?",10,13,"Press 1. Change Order",10,13,"Press any key to continue. $"

choice db 0
;q dw 0
;r dw 0
v db 8
;s dw 0

lasprice dw 60
margprice dw 50
spagprice dw 40

birprice dw 100
beefprice dw 150
tikkaprice dw 120

pizzaprice dw 200
burgerprice dw 150



nprice dw 0

totPrice dw 0
prevPrice dw 0

var1 db 100 dup('$')

.code
main proc

mov ax,@data
mov ds,ax

mov ah,9
Lea dx,m0
int 21h

start:
cmp v,8
jg start1

mov ah,9
Lea dx,m1
int 21h

menu:

mov ah, 9
lea dx,m15  ;m15 1
int 21h

mov ah,9
lea dx, v1
int 21h

Lea dx,m2
int 21h

lea dx,v2
int 21h

lea dx, v3
int 21h

lea dx, v4
int 21h

lea dx, v5
int 21h

mov ah, 9
lea dx,m16  ;m15 2
int 21h

mov ah, 9
lea dx, m17
int 21h

mov ah, 9
lea dx, m18
int 21h

mov ah, 1
int 21h

intiMenu:

mov choice, al

cmp choice, 50
jne menuadd

mov ah,9
Lea dx,m3
int 21h

mov ah,1
int 21h

cmp al,31h
je lasagn ;rice_
cmp al,32h
je marga  ;veg_
cmp al,33h
je sapaghetti ;soup_
cmp al, 34h
je biryani

cmp al, 35h
je beef


cmp al, 36h
je tikka

cmp al, 37h
je pizza

cmp al, 38h
je burger


menuadd:

cmp choice, 49
jne FExit

inc v

mov ah,9
Lea dx,m8
int 21h

mov ah,9
Lea dx,m4
int 21h

mov ah,1
int 21h
cmp al,32h
je menu

mov ah,9
Lea dx,m9
int 21h

mov si,offset var1

l1:
mov ah,1
int 21h
cmp al,13
je print
mov [si],al
inc si
jmp l1

print:

call price

start1:

mov ah, 9
lea dx,m15  ;m15 1
int 21h


mov ah,9
lea dx, v1
int 21h

Lea dx,m2
int 21h

lea dx,v2
int 21h

lea dx, v3
int 21h

lea dx, v4
int 21h

lea dx, v5
int 21h



mov ah,2

mov dl, 10
int 21h

mov dl, 13
int 21h

mov ah,2
mov dl,' '
int 21h


mov dl,v   ;line 113 breakpoint
add dl, 48
int 21h

mov ah,2
mov dl,'.'
int 21h


mov dx,offset var1
mov ah,9
int 21h

mov ah,2
mov dl,' '
int 21h

xor ax,ax
mov ax,nprice
call outdec



mov ah,9
Lea dx,m12
int 21h


mov ah, 9
lea dx,m16  ;m15 1
int 21h

mov ah, 9
lea dx, m17
int 21h

mov ah, 9
lea dx, m18
int 21h

mov ah, 1
int 21h

mov choice, al

cmp choice, 50
jne menuadd

mov ah,9
Lea dx,m3
int 21h

mov ah,1
int 21h

cmp al,31h
je lasagn ;rice_
cmp al,32h
je marga  ;veg_
cmp al,33h
je sapaghetti ;soup_
cmp al, 34h
je biryani

cmp al, 35h
je beef


cmp al, 36h
je tikka

cmp al, 37h
je pizza

cmp al, 38h
je burger


newmenu_:

mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec


mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je newmenu_

mov ax, bx


mul nprice

mov bx,ax

jmp totalprice


marga:

mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec

mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je marga

mov ax, bx

mul margprice

mov bx,ax

jmp totalprice

lasagn:

mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec

mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je lasagn

mov ax, bx



mul lasprice

mov bx,ax

jmp totalprice

sapaghetti:
mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec

mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je sapaghetti

mov ax, bx


mul spagprice

mov bx,ax

jmp totalprice

;biryani

biryani:
mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec

mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je biryani

mov ax, bx


mul birprice

mov bx,ax

jmp totalprice

;beef

beef:
mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec

mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je beef

mov ax, bx


mul beefprice

mov bx,ax

jmp totalprice
;tikka
tikka:
mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec

mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je tikka

mov ax, bx


mul tikkaprice

mov bx,ax

jmp totalprice
;pizza
pizza:
mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec

mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je pizza

mov ax, bx


mul pizzaprice

mov bx,ax

jmp totalprice
;burger
burger:
mov ah,9
Lea dx,m5
int 21h

xor ax,ax

call indec

mov bx, ax

mov ah, 9
lea dx, m20
int 21h

mov ah, 1
int 21h

cmp al, '1'
je burger

mov ax, bx


mul burgerprice

mov bx,ax

jmp totalprice


price:

mov ah,9
Lea dx,m10
int 21h

mov ax,0
mov bx,0
mov cx,0
mov dx,0

input:
and ax,000Fh
push ax
mov ax,10
mul bx
mov bx,ax
pop ax
add bx,ax

mov ah,1
int 21h

cmp al,0Dh
jne input

add nprice,bx
ret



totalprice:
mov ax, totPrice
mov prevPrice, ax
add totPrice, bx

mov ah,9
lea dx, m19
int 21h

xor ax,ax


mov ax,prevPrice
call outdec

mov ah, 9
Lea dx,m6
int 21h

xor ax,ax


mov ax, totPrice
call outdec

mov ah,9
Lea dx,m13
int 21h

mov ah,9
Lea dx,m14
int 21h

mov ah,1
int 21h

cmp al,31h
je start

mov ah,9
Lea dx,m7
int 21h

FExit:
mov ah,4ch
int 21h

main endp
;include indec.asm

indec proc

push bx
push cx
push dx
@begin:

mov ah, 2
mov dl, ' '
int 21h

xor bx, bx
xor cx, cx

mov ah, 1
int 21h

cmp al, '-'
je @minus

cmp al, '+'
je @plus
jmp @repeat2

@minus:
mov cx, 1
@plus:
int 21h

@repeat2:

cmp al, '0'
jnge @not_digit
cmp al, '9'
jnle @not_digit

and ax, 000fh
push ax

mov ax,10
mul bx
pop bx
add bx, ax

mov ah, 1
int 21h
cmp al, 0dh
jne @repeat2

mov ax, bx
or cx, cx

je @exit
neg ax

@exit:

pop dx
pop cx
pop bx
ret

@not_digit:

mov ah, 2
mov dl, 0dh
int 21h
mov dl, 0ah
int 21h
jmp @begin
ret
indec endp

;include outdec.asm

outdec proc

push  ax
push  bx
push  cx
push  dx

or ax, ax
jge @end_if1

push ax
mov dl, ' '
mov ah, 2
int 21h
pop ax
neg ax

@end_if1:

xor cx, cx
mov  bx, 10d

@repeat1:

xor dx, dx
div bx
push dx
inc cx


or  ax, ax
jne   @repeat1

mov   ah, 2

@print_loop:

pop  dx
or dl, 30h
int 21h
loop  @print_loop

pop dx
pop cx
pop bx
pop ax

ret
outdec endp

end main





; [SOURCE]: D:\Restaurent-Billing-System-master\restaurant.asm
