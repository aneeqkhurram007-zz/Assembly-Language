EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
pastpaper.exe_ -- emu8086 assembler version: 4.08  
 
[ 4/4/2021  --  6:10:08 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .MODEL SMALL
[   2]        :                                       .STACK 100H
[   3]        :                                       
[   4]        :                                       
[   5]        :                                       .DATA
[   6]    0100: 0A 00                                 A dw 10
[   7]    0102: 14 00                                 B dw 20
[   8]    0104: 12 00                                 C dw 18
[   9]    0106: 12 00                                 D dw 18       ;defining all variables
[  10]    0108: 00 00                                 ctemp dw 0
[  11]    010A: 56 61 6C 75 65 20 6F 66 20 41 20 3D   StringA db "Value of A = ",A,10,13,"$"
                20 00 0A 0D 24                      
[  12]    011B: 56 61 6C 75 65 20 6F 66 20 42 20 3D   StringB db "Value of B = ",B,10,13,"$"
                20 02 0A 0D 24                      
[  13]    012C: 76 61 6C 75 65 20 6F 66 20 43 20 3D   StringC db "value of C = ",C,10,13,"$"
                20 04 0A 0D 24                      
[  14]        :                                       
[  15]        :                                       
[  16]        :                                       .CODE
[  17]        :                                       
[  18]        :                                       
[  19]    0140:                                       MAIN PROC
[  20]        :                                       
[  21]    0140: B8 10 00                              MOV AX, @DATA
[  22]    0143: 8E D8                                 MOV DS, AX
[  23]        :                                       
[  24]    0145: A1 00 00                              MOV AX, A
[  25]        :                                       
[  26]    0148: 8B 1E 02 00                           MOV BX, B
[  27]        :                                       
[  28]    014C: 3B C3                                 CMP AX,BX
[  29]    014E: 7C 00                                 JL IF1
[  30]        :                                       
[  31]        :                                       
[  32]    0150:                                       IF1:
[  33]    0150: 8B 0E 04 00                           MOV CX,C
[  34]    0154: 3B D9                                 CMP BX,CX      ;first if condition
[  35]    0156: 7F 02                                 JG IF2
[  36]        :                                       
[  37]    0158: EB 44                                 JMP END       ;if condition is not satsified jump out of if
[  38]        :                                       
[  39]    015A:                                       IF2:
[  40]    015A: 8B 16 06 00                           MOV DX,D
[  41]    015E: 3B CA                                 CMP CX,DX
[  42]    0160: 7E 02                                 JLE IF3          ;second if condition
[  43]        :                                       
[  44]    0162: EB 3A                                 JMP END
[  45]        :                                       
[  46]    0164:                                       IF3:
[  47]        :                                       ;third if condition
[  48]    0164: 2B 1E 04 00                           SUB BX,C           ;B-C
[  49]        :                                       
[  50]        :                                       
[  51]        :                                       ;MOV CX,0
[  52]    0168: B9 04 00                              MOV CX, 4
[  53]        :                                       
[  54]    016B:                                       LOOP1:
[  55]        :                                       
[  56]    016B: 01 16 08 00                           ADD ctemp,DX
[  57]        :                                       ;ctemp=4C
[  58]    016F: E2 FA                                 LOOP LOOP1
[  59]        :                                       
[  60]        :                                       
[  61]        :                                       
[  62]        :                                       
[  63]    0171: B9 05 00                              MOV CX,5
[  64]        :                                       
[  65]    0174:                                       LOOP2:
[  66]        :                                       
[  67]    0174: 03 16 06 00                           ADD DX,D
[  68]        :                                       ;DX=6D
[  69]    0178: E2 FA                                 LOOP LOOP2
[  70]        :                                       
[  71]        :                                       
[  72]        :                                       
[  73]    017A: F7 DA                                 NEG DX                     ;DX=-6D
[  74]    017C: 03 06 00 00                           ADD AX,A
[  75]    0180: 03 C3                                 ADD AX,BX                    ;AX=2A+(B-C)
[  76]    0182: 03 06 08 00                           ADD AX,ctemp                 ;AX=A+(B-C)+4C
[  77]    0186: 03 C2                                 ADD AX,DX                    ;AX= A+(B-C)-6D
[  78]        :                                       
[  79]        :                                       
[  80]        :                                       ;MOV A,0
[  81]    0188: A3 00 00                              MOV A,AX
[  82]        :                                       
[  83]    018B: B4 09                                 MOV AH, 9
[  84]    018D: BA 0A 00                              LEA DX, StringA
[  85]    0190: CD 21                                 INT 21H
[  86]        :                                       
[  87]    0192: BA 1B 00                              LEA DX, StringB
[  88]    0195: CD 21                                 INT 21H
[  89]        :                                       
[  90]    0197: BA 2C 00                              LEA DX, StringC
[  91]    019A: CD 21                                 INT 21H
[  92]        :                                       
[  93]        :                                       
[  94]    019C: EB 00                                 JMP END
[  95]        :                                       
[  96]        :                                       
[  97]    019E:                                       END:
[  98]        :                                       
[  99]        :                                       
[ 100]    019E: B4 4C                                 MOV AH, 4CH
[ 101]    01A0: CD 21                                 INT 21H
[ 102]        :                                       
[ 103]        :                                       
[ 104]        :                                       MAIN ENDP
[ 105]        :                                       
[ 106]        :                                       
[ 107]        :                                       END MAIN
[ 108]        :                                       
[ 109]        :                                       
[ 110]        :                                       
[ 111]        :                                       
[ 112]        :                                       
[ 113]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: A2      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 1F      -   check sum (l.byte)
0013: 00      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 14      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 14      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
